{"pageProps":{"post":{"title":"Getting started with this template","date":"2021-08-24T05:35:07.322Z","slug":"getting-started","author":{"name":"sandypockets","picture":"/assets/blog/authors/sandypockets_avatar.jpg"},"content":"<h1>Getting started</h1>\n<p>These steps will guide you through creating your own local copy of the project. You'll learn how to quickly get it up and running, so you can get back to creating your content.</p>\n<p>This app was built and tested with Node <code>14</code>. It uses React <code>17.0.2</code>, the latest version of <code>Next</code>, and Tailwind CSS <code>2.2.4</code>. Check out the <code>package.json</code> file for a complete list of dependencies.</p>\n<h2>Use create-next-app</h2>\n<p>Create Next App is the fastest way to begin using this blog starter. You can use NPM or Yarn, but Yarn is recommended.</p>\n<ol>\n<li>Replace <code>my-new-blog</code> in either of the examples below (with whatever you'd like to use as the root directory), and run the command.</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\"># with npm\nnpx create-next-app --example https://github.com/sandypockets/nextjs-blog-starter/tree/main my-new-blog</code></pre></div>\n<br/>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># with yarn</span>\n<span class=\"token function\">yarn</span> create next-app --example https://github.com/sandypockets/nextjs-blog-starter/tree/main my-new-blog\n</code></pre></div>\n<ol start=\"2\">\n<li>Once the project is created, change into the directory.</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> my-new-blog\n</code></pre></div>\n<ol start=\"3\">\n<li>Install dependencies.</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> <span class=\"token function\">install</span>\n</code></pre></div>\n<p>or if you used npm</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n</code></pre></div>\n<h3>Development server</h3>\n<p>You can start the development server with <code>yarn</code>, <code>npm</code>, or <code>next</code>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># yarn</span>\n<span class=\"token function\">yarn</span> dev\n\n<span class=\"token comment\"># npm</span>\n<span class=\"token function\">npm</span> dev\n\n<span class=\"token comment\"># next</span>\nnext dev\n</code></pre></div>\n<p>Once the server is running, visit <a href=\"http://localhost:3000\">http://localhost:3000</a> in your browser.</p>\n<h3>Constants</h3>\n<p>Set up each of the constants, much like you would a <code>.env</code>, in the <code>lib/constants.js</code> file.</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">EXAMPLE_PATH</span> <span class=\"token operator\">=</span> <span class=\"token string\">'blog-starter'</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">CMS_NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Markdown'</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">HOME_OG_IMAGE_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">'https://og-image.vercel.app/Next.js%20Blog%20Starter%20Example.png?theme=light&#x26;md=1&#x26;fontSize=100px&#x26;images=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Ffront%2Fassets%2Fdesign%2Fnextjs-black-logo.svg'</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">BLOG_NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Next.js Blog Starter'</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">KEYWORDS</span> <span class=\"token operator\">=</span> <span class=\"token string\">'starter, blog, next.js, template'</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">DESCRIPTION</span> <span class=\"token operator\">=</span> <span class=\"token string\">'A starter blog template for Next.js'</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">AUTHOR</span> <span class=\"token operator\">=</span> <span class=\"token string\">'sandypockets'</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">LANG</span> <span class=\"token operator\">=</span> <span class=\"token string\">'en-CA'</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">GITHUB_REPO</span> <span class=\"token operator\">=</span> <span class=\"token string\">'https://github.com/sandypockets'</span>\n</code></pre></div>\n<h3>Generate a sitemap and robots.txt</h3>\n<p>Sitemaps are an important part of SEO. This section walks through adding your base URL to the sitemap generator. The generator runs automatically after each build, generating a new sitemap each time you update your blog.</p>\n<p>The generated sitemap can be found in <code>public/sitemap.xml</code>. This command also generates a new <code>public/robots.txt</code> file.</p>\n<ol>\n<li>Open the <code>scripts/generate.sitemap.mjs</code> file.</li>\n<li>On Line 5, replace <code>https://blog-starter.sandypockets.dev</code> with your own blog's website.</li>\n<li>On Line 6, replace <code>en-CA</code> with your preferred locale (<code>en-UK</code>, <code>en-US</code>, etc.). This is used to determine the format of the date stamp in the sitemap.</li>\n</ol>\n<p>When you're ready to test it:</p>\n<ol>\n<li>Run <code>yarn build</code></li>\n<li>Check the <code>public/</code> directory for the <code>sitemap.xml</code> file and <code>robots.txt</code> file.</li>\n<li>Run <code>yarn start</code></li>\n<li>Visit <code>http://localhost:3000/sitemap.xml</code></li>\n</ol>\n<p>If you see the xml sitemap, then it was successful.</p>\n<h3>RSS Feed</h3>\n<p>An RSS feed is available for the blog at <code>/feed.xml</code>. However, you must first configure the RSS generator to use your own URL.</p>\n<ol>\n<li>Open the <code>scripts/generate-rss.mjs</code> file.</li>\n<li>On Line 7, replace the <code>https://blog-starter.sandypockets.dev</code> value of <code>BLOG_URL</code> with your own.</li>\n</ol>\n<p>When you're ready to test it:</p>\n<ol>\n<li>Run <code>yarn build</code></li>\n<li>Check the <code>public/</code> directory for the <code>feed.xml</code> file.</li>\n<li>Run <code>yarn start</code></li>\n<li>Visit <code>http://localhost:3000/feed.xml</code></li>\n</ol>\n<p>If you see the xml RSS feed, then it was successful.</p>\n<h3>Set up Google Analytics</h3>\n<p>You will need to have your Google tag ID. If you do not have one, or do not have a Google Analytics account, you can sign up at <a href=\"https://analytics.google.com/\">analytics.google.com</a></p>\n<ol>\n<li>Create a copy of the <code>.env.local.example</code> file, and name it <code>.env.local</code>. In the terminal, run:</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">cp</span> .env.local.example .env.local\n</code></pre></div>\n<ol start=\"2\">\n<li>Grab your Google tag ID from your Analytics account, and replace the <code>G-XXXXXXXXXX</code> in the new <code>.env.local</code> file you just created.</li>\n</ol>\n<h3>Set up SendGrid</h3>\n<p>You will need a free SendGrid account, which allows you to send up to 100 emails each day. Replace the <code>REPLACE-WITH-YOUR-API-KEY</code> text in the `.env.exa</p>\n<ol>\n<li>Get your SendGrid API key from your SendGrid account.</li>\n<li>Open the <code>.env.local</code> file that you created when setting up Google Analytics.</li>\n<li>Replace <code>REPLACE-WITH-YOUR-API-KEY</code> with your actual API key from SendGrid.</li>\n</ol>\n<h3>Storybook</h3>\n<p>Storybook is handy for crafting and tweaking components. Styling components in isolation this way can help make them more composable, since they're less reliant on the environment they're rendered in. Storybook runs on a separate server, so you can run it alongside the development server if you prefer.</p>\n<ol>\n<li>To use Storybook, start the Storybook server.</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> storybook\n</code></pre></div>\n<ol start=\"2\">\n<li>Visit <a href=\"http://localhost:6006/\">http://localhost:6006/</a> in your browser.</li>\n</ol>\n<h2>Building for production</h2>\n<p>While it's always a good idea to check out the build, it is especially important with Tailwind CSS. Tailwind purges unused classes to keep the build size light. However, if you've added classes dynamically with JavaScript, then you should be sure those classes weren't removed during build. Learn more in the <a href=\"https://tailwindcss.com/docs/optimizing-for-production\">Optimizing for production</a> section of the Tailwind docs.</p>\n<ol>\n<li>Start building.</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> build\n</code></pre></div>\n<ol start=\"2\">\n<li>Once building is complete, run the build.</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> start\n</code></pre></div>\n<ol start=\"3\">\n<li>Visit <a href=\"http://localhost:3000\">http://localhost:3000</a> in your browser.</li>\n</ol>\n<h2>Adding content</h2>\n<p>Learn how to add content like blog posts or pages.</p>\n<h3>Add a blog post</h3>\n<ol>\n<li>Add a new Markdown file (<code>.md</code>) to the <code>/_posts</code> directory.</li>\n<li>Add the required front matter (described below) and adjust it as needed.</li>\n<li>Images related to the post should be stored in within the appropriate the <code>/public/assets/blog</code> directory. It is recommended you create a new folder for each blog post to prevent the images files from growing unwieldy.</li>\n<li>That's it. Your new post will show up alongside the others on your homepage.</li>\n</ol>\n<blockquote>\n<p>Note: The slug is the path that will be displayed, and is based on the title of your <code>.md</code> file. For example, <code>kobe.md</code> becomes <code>localhost:3000/posts/kobe</code></p>\n</blockquote>\n<h4>How it works</h4>\n<p>Blog posts are stored in the <code>/_posts</code> directory as Markdown files. To create a new post, simply add a new markdown file (<code>.md</code>) to the <code>/_posts</code> directory. Each post must include the appropriate front matter.</p>\n<p>To create the blog posts we use <a href=\"https://github.com/remarkjs/remark\"><code>remark</code></a> and <a href=\"https://github.com/remarkjs/remark-html\"><code>remark-html</code></a> to convert the Markdown files into an HTML string, and then send it down as a prop to the page. The metadata of every post is handled by <a href=\"https://github.com/jonschlinkert/gray-matter\"><code>gray-matter</code></a> and also sent in props to the page.</p>\n<h5>Front matter</h5>\n<p>An example of the required front matter:</p>\n<blockquote>\n<p>Note: The formatting of the front matter is important. Ensure the indentation remains the same.</p>\n</blockquote>\n<div class=\"remark-highlight\"><pre class=\"language-text\"><code class=\"language-text\">---\ntitle: &#x26;#39;A blog starter you actually want to use&#x26;#39;\nexcerpt: &#x26;#39;There are hundreds of different blog starters out there. But none felt quite right. So I built my own. Based off the basic Next.js Blog Starter, but now with several handy features like dark mode (using local storage) or Google Analytics. It comes with Storybook too.&#x26;#39;\ncoverImage: &#x26;#39;/assets/blog/dynamic-routing/tree.jpg&#x26;#39;\ndate: &#x26;#39;2021-08-24T05:35:07.322Z&#x26;#39;\nauthor:\n  name: sandypockets\n  picture: &#x26;#39;/assets/blog/authors/sandypockets_avatar.jpg&#x26;#39;\nogImage:\n  url: &#x26;#39;/assets/blog/dynamic-routing/tree.jpg&#x26;#39;\n---</code></pre></div>\n<p>Adjust the value of each key as needed.</p>\n<h3>Add a page</h3>\n<p>Next.js makes routing easy. All pages live in the <code>/pages</code> directory. The file names used in that directory will map to the path in the browser.</p>\n<blockquote>\n<p>Example: <code>/pages/cool-page.jsx</code> becomes <code>localhost:3000/pages/cool-page</code></p>\n</blockquote>\n<h3>Manage global data</h3>\n<p>Global variables, like your blog's name, or your GitHub URL, can be managed in <code>/lib/constants.js</code></p>\n<p>You can adjust the blog's metadata (some of which relies on the global variables described above) can be adjusted in the <code>/components/Layout/Meta.jsx</code> component.</p>\n","ogImage":{"url":"/assets/blog/getting-started/cover.jpg"},"coverImage":"/assets/blog/getting-started/snowy-mountain.jpg"}},"__N_SSG":true}